---
title: Le Wagon | WeChat Mini Program development workshop
---

<div class="banner" style="background-image:linear-gradient(180deg,rgba(0,0,0,.2),rgba(0,0,0,.5) 70%), url('images/background.jpg');">
  <div class="banner-content slideUp">
    <h1>Crack the code!</h1>
    <h2>A crash course by Le Wagon x IKEA</h2>
    <p class="tossing"><img src="images/QRCodeLeWagon.gif" width="150" height="150" /></p>
  </div>
</div>

<div class="container-fluid readme">
  <div class="row">
    <div class="col-xs-12 col-sm-8 col-sm-offset-2">
      <section class="readme-section">
        <h2 class="readme-header">What's the plan?</h2>

        <p><strong>Morning</strong></p>
        <ul>
          <li>9AM: welcome!</li>
          <li>9:30AM: <em class="lecture">Lecture #1:</em> Â∞èÁ®ãÂ∫è 101 (45min)</li>
          <li>10:15AM: break</li>
          <li>10:30AM: <em class="workshop">Workshop #1:</em> Build your first WeChat app with WXML/WXSS (90min)</li>
          <li>12PM: lunch</li>
        </ul>
        <p><strong>Afternoon</strong></p>
        <ul>
          <li>1:30PM: Workshop continues (60min)</li>
          <li>2:30PM: <em class="lecture">Lecture #2:</em> API (60min)</li>
          <li>3:30PM: break</li>
          <li>3:45PM: <em class="workshop">Workshop #2:</em> Create IKEA‚Äôs store locator in WeChat (60min)</li>
          <li>5PM: WeChat product development Q&A with Fran Yang</li>
          <li>6PM: End of the day!</li>
        </ul>

      </section>

      <section class="readme-section">
        <h2 class="readme-header">What's the take away?</h2>

        <p class="text-center"><strong>Today we'll make your first WeChat Â∞èÁ®ãÂ∫è: a store locator!</strong></p>
        <p class="text-center">
        <video width="300" height="534" controls>
          <source src="images/IKEAstores.mp4" type="video/mp4">
            Your browser does not support the video tag.
          </video>
        </p>
        </section>

        <section>
          <h1 class="workshop text-center">Workshop #1</h1>
        </section>

        <section class="readme-section">
          <h2 class="readme-header">1. Let's set up üõ†</h2>
          <ol>
            <li>Open and bookmark the <a href="https://mp.weixin.qq.com/">WeChat Official Accounts Platform</a>. We will refer to its <a href="https://developers.weixin.qq.com/miniprogram/dev/index.html">[Mini Programs Developers Docs]</a> very often.</li>
            <li>Download and install the <strong>Integrated Development Environment</strong> (IDE) for WeChat: <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">Select "Stable build" and choose Windows 64 or Mac.</a> If you are using Linux, check this <a href="https://github.com/cytle/wechat_web_devtools">open source hack</a>.</a></li>
            <li>Open WeChat's IDE to setup your first project
              <ul>
                <li>Turn off any VPN. On the home screen, scan the QR code with your personal WeChat. You should read "Scan succesfully". On your mobile, authorize the login. You're in!</li>
                <li>Choose <strong>"Mini Program"</strong> from the left menu</li>
                <li>Click the <strong>+ button</strong> to add a new project in your list
                  <ol>
                    <li>Insert a project name (don't worry, it won't show to users). Example: KungfuPanda app</li>
                    <li>Select a directory where the Mini Program code will be stored on your computer. (Suggestion: make a new folder on your <strong>Desktop</strong>)</li>
                    <li>In the AppID field, you're supposed to input your registered AppID. Don't worry, you can use a "Test account" instead. WeChat will add a random AppID</li>
                    <li>Make sure Dev Mode has selected "Mini Program" and the Language is "Javascript"</li>
                  </ol>
                </li>
              </ul>
            </li>
          </ol>

          <p class="text-center">
            <img src='images/project-setup.png' class="full-width" />
          </p>

        </section>

        <section class="readme-section">
          <h2 class="readme-header">2. Add some content with WXML markup üèó</h2>
          <ul>
            <li>
              To save time, just right-click the following image and save it <strong>inside your WeChat Mini Program code directory</strong> (put this file inside a new "images" folder)
              <ul class="list-inline features">
                <li><img src="images/kungfupanda.jpg" alt=""></li>
              </ul>
            </li>
            <li>Then start writing some WXML code in <code>index.wxml</code>. We want:

              <ol>
                <li>One <code>image</code> tag</li>
                <li>Two <code>text</code> tags</li>
                <li>One <code>button</code> tag</li>
              </ol>

            </li>
            <li>Have a little doubt here? no worries, always refer to the <a href="https://developers.weixin.qq.com/miniprogram/en/dev/component/index.html?t=18090718">Official Documentation!</a></li>

          </ul>
          <a class="btn-treehouse drop" data-toggle="collapse" data-target="#html" aria-expanded="false" aria-controls="html">‚ö†Ô∏è Click here to reveal the solution</a>

          <div class="collapse" id="html">
          <% code("html") do %>

          <image src="/images/kungfupanda.jpg"/>
          <text>Get new superpowers</text>
          <text>Learn to code!</text>
          <button type="default">Start today</button>

          <% end %>
          </div>

          <hr>

          <h3 class="">Tips</h3>
          <ul>
            <li>Use the built-in <strong>auto complete</strong> function to make sure you don't forget any <strong>end tags</strong>.</li>
            <li>Your image <code>src</code> allows to load the file from the current page (index.wxml), you want to start with a slash <code>/</code> to write an absolute path</li>
            <li>Don't forget to place your images inside a folder, e.g <code>/images</code></li>
            <li>The <code>text</code> tag is "inline", i.e each tag will be side by side. If you want to break on two or multiple lines, consider using <code>view</code> tags instead</li>
          </ul>

        </section>


        <section class="readme-section">
          <h2 class="readme-header">3. Use WXSS for fonts & colors üé®</h2>
          <ul>
            <li>First, please transform your image tag into a background image, using a <code>view</code> with a CSS class <code>banner</code></li>
            <li>Second, add more CSS classes for your titles such as <code>headline</code> and <code>action</code>.</li>
          </ul>
          <p>
          <a class="btn-treehouse drop" data-toggle="collapse" data-target="#classes" aria-expanded="false" aria-controls="classes">‚ö†Ô∏è Click here to reveal the solution</a></p>

          <div class="collapse" id="classes">
          <% code("html") do %>
          <view class="banner">
            <view class="headline">Get new superpowers</view>
            <view class="action">Learn to code!</view>
            <button type="default">Start today</button>
          </view>
          <% end %>
          </div>
          <hr>


          <p>You can copy/paste the CSS code below in <code>index.wxss</code> and <strong>customize it</strong></p>

          <% code("css") do %>
  .banner {
    color: white;
    text-align: center;
    height: 100vh;
    /* "vh" is a special unit to calculate the viewport height (screen size) */
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    /* "Flexbox" is a CSS positioning method to align all items, here in a column. Look it up! */
    background-image: url('https://www.ikea.com/ext/ikeagateway/statics/gw201904_tablet_portrait.jpg');
    /* We're loading this image from your site!! */
    background-position: center -30px;
    background-repeat: no-repeat;
    background-size: cover !important;
    padding:30px;
  }

  .headline {
    margin-top: 100px;
    font-size: 40px;
    padding:0px;
    font-weight: bold;
    text-shadow: 0px 0px 3px rgba(0, 0, 0, 0.6);
  }

  .action {
    font-size: 25px;
    font-weight: bold;
    color: rgb(255, 255, 255);
    text-shadow: 0px 0px 3px rgba(0, 0, 0, 0.6);
    margin: 30px;
  }
    <% end %>
  </section>

  <section class="readme-section">
    <h2 class="readme-header">4. Make it great! ü§ò</h2>
    It's your landing page... you must make a perfect first impression!
  </section>
  <section>
    <h1 class="workshop text-center">Workshop #2</h1>
  </section>
  <section class="readme-section">

    <h2 class="readme-header drop">Let's build a store locator!</h2>

    <p> In this challenge, you will build the 2nd page of your Wechat program Store Locator, using advanced Wechat capabilities and <strong>API</strong>. </p>

    <p> <a href="https://developers.weixin.qq.com/miniprogram/en/dev/framework/config.html">Read here</a> about the <code>app.json</code> file, used to globally configure your WeChat Mini Program. That's where you can add new pages. </p>


    <h3>1. Create Map Page</h3>
    <strong>app.json:</strong> add a new page named "map" inside your "pages" list like so:

      <% code("javascript") do %>
        "pages":[
          "pages/index/index",
          "pages/map/map"
        ],
      <% end %>

    <h3>2. Link To Map Page</h3>


    <p> Next, how about using your button to navigate to the map?</p>

    <p> <strong>index.wxml:</strong> add a tapping interaction to your button called "map": </p>

      <% code("html") do %>
        <button type="default" bindtap="map"> Start today </button>
      <% end %>

    <strong>index.js:</strong> navigate to the map page in the "map" interaction that you will add to this file:

      <% code("javascript") do %>
        map: function() {
          wx.navigateTo({
            url: '/pages/map/map'
          })
        }
      <% end %>

    <h3>3. Map</h3>
    <ul>
      Tip: Top page listed in app.json "pages" list is the landing page that is shown first! You can put map page above the index page to see it when you save and make coding faster.

      <li><strong>WXML:</strong> Add following in the <code>map.wxml</code> file:</li>
        <ol>
          <li>A title for your page... styled like an H2!</li>
          <li>A map component üëâ (<a href="http://open.wechat.com/cgi-bin/newreadtemplate?t=overseas_open/docs/mini-programs/development/component/map#component_map">check the attributes list here</a>) with static latitude/longitude data.</li>
        </ol>
      </li>

      <% code("html") do %>
      <map longitude="121.47575499999994" latitude="31.232711" scale="10"></map>
      <% end %>

      <li><strong>WXSS:</strong> Style your map in the <code>map.wxss</code> file.</li>
      <% code("css") do %>
      map {
        width: 100%;
        height: 80vh;
      }
      <% end %>

    </ul>
    <hr>
    <h3>4. Continue with live data using code!</h3>
    <ol>
      <li>Instead of static data, your map in <strong>map.wxml</strong> should now use the <a href="https://developers.weixin.qq.com/miniprogram/en/dev/quickstart/basic/file.html#js-interactive-logic">{{mustache syntax}}</a> to bring in live data with placeholders such as <code>"{{longitude}}"</code>, <code>"{{latitude}}"</code>, and <code>"{{scale}}"</code>. </li>
      <ul>
        <li>Add a new placeholder called <code>"{{markers}}"</code> too! Where should it go? ü§î </li>
        <li>Now add some live data to <code>data: {}</code> (located <strong>at the top</strong> of your <strong>map.js</strong> file!)</li>
        <li>
          Tip:
          Remember to match the label names of the mustache placeholders with that in the data:
          e.g. <code>{{ label_name }}</code> and <code>data: { label_name: 134 }</code>
        </li>
      </ul>

      <% code("javascript") do %>
      data: {
        latitude: "31.232711",
        longitude: "121.47575499999994",
        scale: '10',
        markers: []
      }
      <% end %>
    <li>Add your first marker to the "markers" list! Here's a list with 1 marker only:</li>

    <% code("javascript") do %>
      markers: [{
        iconPath: "/images/marker.png",
        id: 0,
        latitude: 31.232711,
        longitude: 121.47575499999994,
        width: 50,
        height: 50
      }]
    <% end %>
      </ol>
</li>
<h3>5. Make it pretty!</h3>
<ul>
  <li>Make your own <a href="https://www.iconfont.cn/search/index?q=marker">marker icon</a>, add it to your project folder, and put the correct <code>iconPath</code></li>
  <li>Want a tooltip? Use the <code>callout</code> inside your marker:</li>

  <% code("javascript") do %>
      markers: [{
        iconPath: "/images/marker.png",
        id: 0,
        latitude: 31.232711,
        longitude: 121.47575499999994,
        width: 50,
        height: 50,
        callout: {
          content: "Shanghai Xuhui Store",
          fontSize: 15,
          color: "#000000",
          padding: 10
        }
      }]
  <% end %>

  Tip: If you can't see the tooltip when you click on the marker, try previewing with your phone instead. The teacher can show you.

</ul>

<hr>
<h3>6. Almost there! Let's fetch our data from the API!</h3>
<ol>
  <li>Open this <a href="https://easy-mock.com/mock/5ca59a237296342b5e1e2c1d/ikea/stores">endpoint in your browser</a> to discover the data we prepared for you... üëâ Our objective is to GET these shop markers and load them dynamically in the WeChat mini program.</li>
  <li>Locate the <code>onLoad: function ()</code> in your <strong>map.js</strong> file. This code will run automatically when your page is loaded!</li>

  <li>Inside the function, we can request data from APIs thanks to <a href="https://developers.weixin.qq.com/miniprogram/en/dev/api/network-request.html">wx.request</a></li>

  <% code("javascript") do %>
  let page = this

  wx.request({
    url: 'https://easy-mock.com/mock/5ca59a237296342b5e1e2c1d/ikea/stores',
    header: { 'content-type': 'application/json' },
    success: function (res) {
      console.log('success!');
      console.log(res.data)
    }
  })
<% end %>
<li>You should see data logged to your console now! Reload your app to see a list of stores. If not, call for help üôå</li>
<li>Final step: Use the API data! Use the <code>setData</code> function. Add this line <strong>inside your "success" function</strong>, right after the console.log(res.data) ....</li>
<% code("javascript") do %>
    success: function (res) {
      console.log('success!');
      console.log(res.data)
      page.setData({ markers: res.data.stores })
    }
<% end %>
</ol>
<h3>You should now see stores on the map!! üí™üéâ </h3>
If not, check:
<ul>
  <li>The markers provided in this API call will require your icon to be named <code>marker.png</code> and placed them inside an <code>/images</code> folder üòâ</li>
  <li>The markers provided will show up in Shanghai, so move the map there! ;)</li>
</ul>
</section>

<section class="readme-section">
  <h2 class="readme-header">We need your feedbacks!</h2>
  <ul>
    <li>Our workshops are driven by your comments and suggestions. <br>Space, instructor, content, time... <strong>Please tell us what you think!</strong></li>
    <p class="text-center"><img src="images/feedbacks.png" alt="" class="QR"></p>
    <li>üëÜ If you'd like today's <strong>slides</strong>, please take 2 minutes to fill up this form! We'll send them over email. Win-win.</li>
  </ul>
</section>

<section class="readme-section">
  <h2 class="readme-header">Important links</h2>
  <ul>
    <li><a href="https://minapp.com/">Do your market research on Minapp.com</a></li>
    <li><a href="https://www.wechatdevelopers.com/">Find and hire expert developers on WechatDevelopers.com</a>
    </li>
    <li><a href="https://pan.baidu.com/s/1kW7EvLP">Download the WeChat mini programs ecosystem in one map</a></li>
    <li><a href="https://www.youtube.com/watch?v=2P28lSgNWTA&list=PLkbmdtbypn7TdIyxQzVccYO2-m-pXMK6g">üéÅ Go further: watch this free crash course on Youtube (for Javascript beginners)</a></li>
    <li><a href="https://www.lewagon.com/">Learn how to design and code an application from scratch with Le Wagon bootcamps in China</a></li>
  </ul>
</section>

</div>
</div>
</div>
